<!-- LEAVE THIS HTML COMMENT INTACT - Craft gets angry if there's no HTML content in the twig file-->

{# 
    Craft CMS 4 - matrix-conditionals.twig
    https://github.com/simplicate-web/craft4-matrix-conditionals
    Steve Comrie <steve@simplicate.ca>
#}

{% js %}

// Sample configuration
// read more here: https://github.com/simplicate-web/craft4-matrix-conditionals#configuration
// ---------------------------------------------------------------
const matrixConditionalsConfig = {

    // for any `background` field in any block type in the `contentBuilder` matrix field
    'contentBuilder.*.background': {

        // only show the coverage field if any background is selected
        ':empty:': {
            'showOnUnequal': 'coverage',
            'hideOnEqual': 'coverage'
        },

        // this is the same as above, just reversed to use :notempty: instead of :empty:
        // ':notempty:': {
        //     'showOnEqual': 'coverage',
        //     'hideOnUnequal': 'coverage',
        // },
        
        // if the value is set to "color", show the `backgroundColor` field, otherwise hide it
        'chooseCustom': {
            'showOnEqual': 'backgroundColor',
            'hideOnUnequal': 'backgroundColor'
        }
    },

    // for the `videoSource` field in any `video` block type in and matrix field
    '*.video.videoSource': {

        // if the value is set to "youtube", show the `externalUrl` and `coverImage` fields
        'youtube': {
            'showOnEqual': ['externalUrl', 'coverImage', 'showRelated'],
            'hideOnUnequal': 'showRelated'
        },

        // if the value is set to "vimeo", show the `externalUrl` and `coverImage` fields
        'vimeo': {
            'showOnEqual': ['externalUrl', 'coverImage'],
        },

        // if the value is set to "localAsset", hide the `externalUrl` and `coverImage` fields, and
        // show the `videoAsset` field, otherwise hide the `videoAsset` field.
        'localAsset': {
            'hideOnEqual': ['externalUrl', 'coverImage'],
            'showOnEqual': ['mp4File'],
            'hideOnUnequal': ['mp4File']
        }
    } 
}

const matrixConditionals = {

    findMatchingConditional(value, field, block, matrix) {

        this.currentValue = this.cleanValue( value )

        if( $fullMatch = this.findFieldCondition(`${matrix}.${block}.${field}`) )
            return $fullMatch

        if( $anyMatrixMatch = this.findFieldCondition(`*.${block}.${field}`) )
            return $anyMatrixMatch

        if( $anyBlockMatch = this.findFieldCondition(`${matrix}.*.${field}`) )
            return $anyBlockMatch

        if( $anyField = this.findFieldCondition(`*.*.${field}`) )
            return $anyField
    },

    findFieldCondition( condition ) {
        this.currentCondition = condition
        return this.config[condition] ?? null
    },

    cleanValue(value) {
        var strValue = value.toString().trim().toLowerCase()
        if( strValue.startsWith('base64:') ) {
            strValue = this.decodeBase64( value ).toLowerCase();
        }
        
        return strValue
    },

    decodeBase64(value) {
        return atob(value.toString().trim().replace('base64:', ''))
    },

    evaluateConditions( block, value, conditions ) {
        const thisObj  = this
        const strValue = this.cleanValue( value )

        Object.keys(conditions).forEach(function(key, index) {
            if( typeof this[key] === 'object' && this[key] !== null ) {

                const strKey = key.toString().toLowerCase()

                const isEqual = (
                    (
                        ( strKey == ':empty:' || strKey == ':notempty:' ) &&
                        (
                            ( strKey == ':empty:'    && strValue.length === 0 ) ||
                            ( strKey == ':notempty:' && strValue.length > 0   )
                        )
                    ) ||   
                    ( strValue == strKey )
                )
                
                if( isEqual ) {
                    thisObj.toggleFields( 'show', block, this[key].showOnEqual ?? [], 'showOnEqual' )
                    thisObj.toggleFields( 'hide', block, this[key].hideOnEqual ?? [], 'hideOnEqual' )
                } else {                    
                    thisObj.toggleFields( 'show', block, this[key].showOnUnequal ?? [], 'showOnUnequal' )
                    thisObj.toggleFields( 'hide', block, this[key].hideOnUnequal ?? [], 'hideOnUnequal' )
                }
            }
        }, conditions);
    },

    toggleFields( onoff = 'show', block, fields, method = '' ) {
        fields = fields.isArray ? fields : typeof fields == 'object' ? Object.values( fields ) : [fields]

        value = this.currentValue
        cond  = this.currentCondition

        fields.forEach(function (item, index) {
            if( toggleMe = block.querySelector(`.field[data-attribute="${item}"]`) ) {    
                ( onoff == 'hide' )
                    ? toggleMe.classList.add('matrixConditionals--hidden' )
                    : toggleMe.classList.remove('matrixConditionals--hidden' )

                if( this.debug ) { console.log( `applying "${value}" for rule matching: ${cond}\n  ${method}: ${item}   (${onoff})`) }
            }
        });
    },

    testField( input, useValue = null ) {

        const type     = input.getAttribute('type')     ?? null
        const tabindex = input.getAttribute('tabindex') ?? null
        
        if( type == 'text' && tabindex == -1 ) {
            return
        }

        if( type == 'file' ) {
            return
        }

        if( type == 'hidden' && input.parentElement.getAttribute('type') != 'button' ) {
            return
        }

        var   value  = useValue ?? input.value ?? null
        const field  = input.closest('.field[data-type]:not([data-type=""]') ?? null
        const block  = field ? field.closest('.matrixblock[data-type]:not([data-type=""]') : null
        const mf     = block ? block.closest( '.matrix-field' ) : null
        const matrix = mf ? mf.closest('.field[data-type]:not([data-type=""]') : null

        if( !field || !block || !matrix ) {
            return
        }

        // find ONLY the first matching condition
        var conditions = this.findMatchingConditional(
            value,
            field.dataset.attribute,
            block.dataset.type,
            matrix.dataset.attribute
        )

        // evaluate checkboxes individually, instead of as a group
        if( type == 'checkbox' ) {
            var checkValue = this.decodeBase64(input.value)
            if( match = conditions[checkValue] ) {
                conditions = {}
                conditions[checkValue] = match
            } else {
                conditions = null
            }
        }
        
        if( conditions ) {
            this.evaluateConditions( block, value, conditions )
        }
    },

    setLoadState( inputs ) {
        var rGroups = []
        inputs.forEach((input) => {
            
            // evaluates radios as a group, instead of individual <inputs>
            if( input.getAttribute('type') == 'radio' ) {
                const groupName = input.getAttribute('name')
                if( rGroups[groupName] ?? null ) {
                    return
                }
                rGroups[groupName] = true
                
                const checked    = document.querySelector(`input[name="${groupName}"]:checked`)
                const groupValue = checked ? checked.value : ''

                this.testField( input, groupValue )

            // evaluate checkbox value only if checked
            } else if( input.getAttribute('type') == 'checkbox' ) {
                this.testField( input, input.checked ? input.value : '' )
            } else {
                this.testField( input )
            }
        });
    },

    watchForChildren( parents ) {
        parents.forEach((input) => {
            this.childCountObserver.observe(input, {
                childList: true
            });

            // test for the first time
            const childCount = input.childElementCount ?? null
            const parentID   = input.parentElement.id ?? null
            const parentElem = document.querySelector( `#${parentID}`)
            if( parentElem ) this.testField( parentElem, ( childCount > 0 ) ? childCount : '' )
        });
    },

    init(debug = false, config) {

        this.config = config
        this.debug  = ( debug )

        document.addEventListener('input', (event) => {
            
            if( event.target.type == 'checkbox' ) {
                this.testField( event.target, event.target.checked ? event.target.value : '' )
            } else {
                this.testField( event.target )
            }
            
        }, false);

        this.hiddenInputObserver = new MutationObserver(function(mutations) {
            const fieldName = mutations[0].target.name ?? null
            const inputField = document.querySelector( `input[name="${fieldName}"]`)
            if( inputField ) matrixConditionals.testField( inputField )
        });

        this.childCountObserver = new MutationObserver(function(mutations) {
            const childCount = mutations[0].target.childElementCount ?? null
            const parentID   = mutations[0].target.parentElement.id ?? null
            const parentElem = document.querySelector( `#${parentID}`)
            if( parentElem ) matrixConditionals.testField( parentElem, ( childCount > 0 ) ? childCount : '' )
        });

        // find hidden inputs used in lightswitch fields
        hiddenInputs = document.querySelectorAll('.matrix.matrix-field>.blocks .lightswitch-inner-container input[type="hidden"]')
        hiddenInputs.forEach((input) => {
            this.hiddenInputObserver.observe(input, {
                attributes: true
            });
        });

        // find div.elements used for asset / entries and table.body elements used for tables
        this.watchForChildren( document.querySelectorAll(`
            .matrix.matrix-field>.blocks fieldset.field div.elementselect div.elements,
            .matrix.matrix-field>.blocks fieldset.field table.editable tbody
        `) )

        // find all matrix block fields on the page on load, and test each of them against possible conditions
        const inputs = document.querySelectorAll('.matrix-field .field input,.matrix-field .field select');
        this.setLoadState( inputs )

        // create a mutation observer to watch for when new blocks get added
        const blockObserver = new MutationObserver(function(mutations) {
            const addedNodes = mutations[0].addedNodes[0] ?? null;
            if( addedNodes ) {
                const dataid = addedNodes.dataset.id ?? ''

                // find all inputs and select fields in the new block and test them
                const inputs = document.querySelectorAll(`.matrixblock[data-id="${dataid}"] input,.matrixblock[data-id="${dataid}"] select`);
                matrixConditionals.setLoadState( inputs )

                // find any hidden inputs in the new block and observe them for attribute change
                const hiddenInputs = document.querySelectorAll(`.matrixblock[data-id="${dataid}"] .field .lightswitch-inner-container input[type="hidden"]`)
                hiddenInputs.forEach((input) => {
                    matrixConditionals.hiddenInputObserver.observe(input, {
                        attributes: true
                    });
                });

                // find div.elements used for asset / entries and table.body elements used for tables
                matrixConditionals.watchForChildren( document.querySelectorAll(`
                    .matrixblock[data-id="${dataid}"] fieldset.field div.elementselect div.elements,
                    .matrixblock[data-id="${dataid}"] fieldset.field table.editable tbody
                `) )
            }
        });

        // find all the block fields for each matrix field on the page and observe it
        blockFields = document.querySelectorAll('.matrix.matrix-field>.blocks')
        blockFields.forEach((blockField) => {
            blockObserver.observe(blockField, {
                childList: true
            });
        });
    }
};

document.addEventListener('DOMContentLoaded', (event) => {
    matrixConditionals.init( debug = true, matrixConditionalsConfig )
});
{% endjs %}

{% css %}
    .matrixConditionals--hidden {
        height : 1px !important;
        max-height : 1px !important;
        overflow: hidden !important;
        opacity: 0 !important;
        margin-bottom: 0 !important;
    }
{% endcss %}